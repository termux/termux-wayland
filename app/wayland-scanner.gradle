//file:noinspection GroovyAssignabilityCheck
import org.gradle.api.*
import org.gradle.api.provider.Property
import org.xml.sax.SAXException

import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory
import javax.xml.XMLConstants

import groovy.xml.XmlSlurper
import groovy.xml.slurpersupport.NodeChild

@SuppressWarnings('unused')
abstract class WaylandScannerExtension {
    Project project
    static final String endl = "\n"
    static final String schema = """\
		|<?xml version="1.0" encoding="UTF-8"?>
		|<!-- Do not edit. This document is automatically generated
		|	 from wayland.dtd using IntelliJ Idea's XML Actions... -->
		|<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
		|	<xs:element name="protocol">
		|		<xs:complexType>
		|			<xs:sequence>
		|				<xs:element minOccurs="0" ref="copyright"/>
		|				<xs:element minOccurs="0" ref="description"/>
		|				<xs:element maxOccurs="unbounded" ref="interface"/>
		|			</xs:sequence>
		|			<xs:attribute name="name" use="required"/>
		|		</xs:complexType>
		|	</xs:element>
		|	<xs:element name="copyright" type="xs:string"/>
		|	<xs:element name="interface">
		|		<xs:complexType>
		|			<xs:sequence>
		|				<xs:element minOccurs="0" ref="description"/>
		|				<xs:choice maxOccurs="unbounded">
		|					<xs:element ref="request"/>
		|					<xs:element ref="event"/>
		|					<xs:element ref="enum"/>
		|				</xs:choice>
		|			</xs:sequence>
		|			<xs:attribute name="name" use="required"/>
		|			<xs:attribute name="version" use="required"/>
		|		</xs:complexType>
		|	</xs:element>
		|	<xs:element name="request">
		|		<xs:complexType>
		|			<xs:sequence>
		|				<xs:element minOccurs="0" ref="description"/>
		|				<xs:element minOccurs="0" maxOccurs="unbounded" ref="arg"/>
		|			</xs:sequence>
		|			<xs:attribute name="name" use="required"/>
		|			<xs:attribute name="type"/>
		|			<xs:attribute name="since"/>
		|		</xs:complexType>
		|	</xs:element>
		|	<xs:element name="event">
		|		<xs:complexType>
		|			<xs:sequence>
		|				<xs:element minOccurs="0" ref="description"/>
		|				<xs:element minOccurs="0" maxOccurs="unbounded" ref="arg"/>
		|			</xs:sequence>
		|			<xs:attribute name="name" use="required"/>
		|			<xs:attribute name="type"/>
		|			<xs:attribute name="since"/>
		|		</xs:complexType>
		|	</xs:element>
		|	<xs:element name="enum">
		|		<xs:complexType>
		|			<xs:sequence>
		|				<xs:element minOccurs="0" ref="description"/>
		|				<xs:element minOccurs="0" maxOccurs="unbounded" ref="entry"/>
		|			</xs:sequence>
		|			<xs:attribute name="name" use="required"/>
		|			<xs:attribute name="since"/>
		|			<xs:attribute name="bitfield"/>
		|		</xs:complexType>
		|	</xs:element>
		|	<xs:element name="entry">
		|		<xs:complexType>
		|			<xs:sequence>
		|				<xs:element minOccurs="0" ref="description"/>
		|			</xs:sequence>
		|			<xs:attribute name="name" use="required"/>
		|			<xs:attribute name="value" use="required"/>
		|			<xs:attribute name="summary"/>
		|			<xs:attribute name="since"/>
		|		</xs:complexType>
		|	</xs:element>
		|	<xs:element name="arg">
		|		<xs:complexType>
		|			<xs:sequence>
		|				<xs:element minOccurs="0" ref="description"/>
		|			</xs:sequence>
		|			<xs:attribute name="name" use="required"/>
		|			<xs:attribute name="type" use="required"/>
		|			<xs:attribute name="summary"/>
		|			<xs:attribute name="interface"/>
		|			<xs:attribute name="allow-null"/>
		|			<xs:attribute name="enum"/>
		|		</xs:complexType>
		|	</xs:element>
		|	<xs:element name="description">
		|		<xs:complexType mixed="true">
		|			<xs:attribute name="summary" use="required"/>
		|		</xs:complexType>
		|	</xs:element>
		|</xs:schema>
"""
    class element_t {
        String name = ""
        String summary = ""
        String description = ""
        String iface_orig = ""
        static final List<String> keywords = [
                "alignas", "alignof", "and", "and_eq", "asm", "auto", "bitand", "bitor", "bool", "break",
                "case", "catch", "char", "char8_t", "char16_t", "char32_t", "class", "compl", "concept",
                "const", "consteval", "constexpr", "constinit", "const_cast", "continue", "co_await",
                "co_return", "co_yield", "decltype", "default", "delete", "do", "double", "dynamic_cast",
                "else", "enum", "explicit", "export", "extern", "false", "float", "for", "friend", "goto",
                "if", "inline", "int", "long", "mutable", "namespace", "new", "noexcept", "not", "not_eq",
                "nullptr", "operator", "or", "or_eq", "private", "protected", "public", "register",
                "reinterpret_cast", "requires", "return", "short", "signed", "sizeof", "static",
                "static_assert", "static_cast", "struct", "switch", "template", "this", "thread_local",
                "throw", "true", "try", "typedef", "typeid", "typename", "union", "unsigned", "using",
                "virtual", "void", "volatile", "wchar_t", "while", "xor", "xor_eq",
                // library defined names
                "destroy"
        ]

        static String sanitise(String str) {
            return ((keywords.contains(str)) ? "_" : "") + str
        }
    }

    class argument_t extends element_t {
        String type
        String iface
        String enum_iface
        String enum_name
        Boolean allow_null = false
        String print_enum_wire_type() {
            switch(type) {
                case "int":
                    return "int32_t"
                case "uint":
                    return "uint32_t"
                default:
                    throw new RuntimeException("Enum type must be int or uint (have " + type + ")")
            }
        }

        String print_type() {
            if (!iface.isEmpty())
                return iface + "_t"
            if (enum_iface?.length() > 0)
                return "enum " + enum_iface + "_" + enum_name
            switch (type) {
                case "int":
                    return "int32_t"
                case "uint":
                    return "uint32_t"
                case "fixed":
                    return "double"
                case "string":
                    return "std::string"
                case "object":
                case "new_id":
                    return "resource_t"
                case "fd":
                    return "int"
                case "array":
                    return "wl_array*"
                default:
                    return type
            }
        }

        String print_short() {
            switch(type) {
                case "int":
                    return "i"
                case "uint":
                    return "u"
                case "fixed":
                    return "f"
                case "string":
                    return "s"
                case "object":
                    return "o"
                case "new_id":
                    return "n"
                case "array":
                    return "a"
                case "fd":
                    return "h"
                default:
                    return "x"
            }
        }

        String print_argument() {
            return print_type() + (!iface.isEmpty() ? "*" : "") + " " + sanitise(name)
        }
    }

    class event_t extends element_t {
        List<argument_t> args
        int since = 0
        argument_t ret
        int opcode = 0

        String print_dispatcher(int opcode) {
            def ss = "" << ""

            int c = 0
            def _args = []
            args.each {  arg ->
                if(arg.enum_name != null && !arg.enum_name.empty && arg.type != "array")
                    _args.add("static_cast<" << arg.print_type() << ">(args[" << c++ << "]." << arg.print_short() << ")")
                else if(!arg.iface.empty && arg.type == "new_id")
                    _args.add("new " << arg.print_type() << "(obj->client(), args[" << c++ << "].n)")
                else if(!arg.iface.empty)
                    _args.add("static_cast<" << arg.print_type() << "*>(resource_t::get(args[" << c++ << "].o))")
                else if(arg.type == "fixed")
                    _args.add("wl_fixed_to_double(args[" << c++ << "].f)")
                else
                    _args.add("args[" << c++ << "]." << arg.print_short())
            }
            ss << "    case " + opcode + ": if(obj->on_" + sanitise(name) + ") obj->on_" + sanitise(name) + "("
            ss << _args.join(", ") << "); break;"
            return ss.toString()
        }

        String print_signal_header() {
            def ss = "" << ""
            ss << "  /** \\brief " << summary << "" << endl
            args.each {arg ->
                ss << "      \\param " << arg.name << " " << arg.summary << endl
            }
            ss << description << endl
            ss << "  */" << endl

            def _args = []
            args.each { a -> _args.add(a.print_type() + (!a.iface.isEmpty() ? "*" : "")) }
            ss << "  std::function<void(" + _args.join(", ") << ")> on_" << sanitise(name) << ";" << endl
            return ss.toString()
        }

        String availability_function_name() {
            return ((since > 1) ? "can_" + name : "")
        }

        String since_version_constant_name() {
            return name + "_since_version"
        }

        String print_header() {
            def ss = "" << ""
            ss << "  /** \\brief " << summary << endl
            if (ret?.summary?.length() > 0)
                ss << "      \\return " << ret.summary << endl

            args.each { arg ->
                if (arg.type == "new_id") {
                    if (arg.iface.isEmpty()) {
                        ss << "      \\param interface Interface to bind" << endl
                        ss << "      \\param version Interface version" << endl
                    }
                } else
                    ss << "      \\param " << sanitise(arg.name) << " " << arg.summary << endl
            }

            ss << description << endl
            ss << "  */" << endl

            def _args = []
            args.each { arg ->
                if(arg.type == "new_id") {
                }
                else
                    _args.add(arg.print_argument())
            }
            _args.add("bool post = true")

            ss << "  void " << sanitise(name) << "(" << _args.join(", ") << ");" << endl

            ss << endl
            ss << "  /** \\brief Minimum protocol version required for the \\ref " << sanitise(name) << " function" << endl
            ss << "  */" << endl
            ss << "  static constexpr std::uint32_t " << since_version_constant_name() << " = " << since << ";" << endl

            if (!availability_function_name().isEmpty()) {
                ss << endl
                ss << "  /** \\brief Check whether the \\ref " << name << " function is available with" << endl
                ss << "      the currently bound version of the protocol" << endl
                ss << "  */" << endl
                ss << "  bool " << availability_function_name() << "() const;" << endl
            }

            return ss.toString()
        }

        String print_body(String iface_name) {
            def new_id_arg = false
            def _args = []

            args.each { arg ->
                if(arg.type == "new_id") {
                    // TODO fix this
                } else
                    _args.add(arg.print_argument())
            }
            _args.add("bool post")

            def ss = "" << ""
            ss << "void " << iface_name << "_t::" << sanitise(name) << "("
            ss << _args.join(", ") << ") {" << endl

            _args = []
            args.each { arg ->
                if(arg.type == "new_id") {
                    if(arg.iface.empty)
                        _args.add("std::string(interface.interface->name), version")
                    _args.add("nullptr")
                }
                else if(arg.type == "object")
                    _args.add(sanitise(arg.name) << "->c_ptr()")
                else if(arg.type == "string")
                    _args.add(sanitise(arg.name) << ".c_str()")
                else if(arg.type == "fixed")
                    _args.add("wl_fixed_from_double(" << sanitise(arg.name) << ")")
                else if(arg.enum_name != null && !arg.enum_name.empty)
                    _args.add("static_cast<" << arg.print_enum_wire_type() << ">(" << sanitise(arg.name) + ")")
                else
                    _args.add(sanitise(arg.name))
            }
            //ss << "  send_event(post, " << opcode << ((args.size > 0) ? ", " << _args.join(", ") : "") << ");" << endl
            ss << "  if (post)" << endl
            ss << "    wl_resource_post_event(*this, " << opcode << ((args.size > 0) ? ", " << _args.join(", ") : "") << ");" << endl
            ss << "  else" << endl
            ss << "    wl_resource_queue_event(*this, " << opcode << ((args.size > 0) ? ", " << _args.join(", ") : "") << ");" << endl
            ss << "}" << endl

            if (!availability_function_name().isEmpty()) {
                ss << endl
                ss << "bool " << iface_name << "_t::" << availability_function_name() << "() const {" << endl
                ss << "  return (version >= " << since_version_constant_name() << ");" << endl
                ss << "}" << endl
            }
            return ss.toString()
        }
    }

    class request_t extends event_t {
    }

    class enum_entry_t extends element_t {
        String value
    }

    class enumeration_t extends element_t {
        List<enum_entry_t> entries
        Boolean bitfield = false

        String print_forward(String iface_name) {
            return "enum class " << iface_name << "_" << name << " : uint32_t;" << endl
        }

        String print_header(String iface_name) {
            def ss = "" << ""
            ss << "/** \\brief " << summary << endl
            ss << description << endl
            ss << "  */" << endl

            ss << "enum class " << iface_name << "_" << name << " : uint32_t" << endl
            ss << "  {" << endl

            entries.each { entry ->
                if (!entry.summary.isEmpty())
                    ss << "  /** \\brief " << entry.summary << " */" << endl

                ss << "  " << sanitise(entry.name) << " = " << entry.value << "," << endl
            }
            ss.setLength(ss.length() - 2)

            ss << endl

            ss << "};" << endl
            return ss.toString()
        }
    }

    class post_error_t extends element_t
    {
        String print_server_header() {
            def ss = "" << ""
            ss << "  /** \\brief Post error: " << summary << endl
            if(description?.length() > 0)
                ss << "  " << description << endl
            ss << "  */" << endl
            ss << "  void post_" << name << "(std::string const& msg);" << endl
            return ss.toString()
        }

        String print_server_body(String iface_name) {
            def ss = "" << ""
            ss << "void " << iface_name << "_t::post_" << name << "(std::string const& msg) {" << endl
            ss << "  post_error(static_cast<uint32_t>(" << iface_name << "_error::" << sanitise(name) << "), msg);" << endl
            ss << "}" << endl
            return ss.toString()
        }
    }

    class interface_t extends element_t {
        int version = 0
        String orig_name
        int destroy_opcode = 0
        List<request_t> requests
        List<event_t> events
        List<enumeration_t> enums
        List<post_error_t> errors

        String print_forward() {
            def ss = "" << ""
            ss << "class " << name << "_t;" << endl
            enums.each { e -> ss << e.print_forward(name) }
            return ss.toString()
        }

        String print_c_forward() {
            def ss = "" << ""
            ss << "struct " << orig_name << ";" << endl
            return ss.toString()
        }

        String print_server_header() {
            def ss = "" << ""
            ss << "/** \\brief " << summary << endl
            ss << description << endl
            ss << "*/" << endl

            ss << "class " << name << "_t : public resource_t {" << endl
            ss << "private:" << endl
            ss << "  static int dispatcher(const void *, void *, uint32_t, const struct wl_message *, union wl_argument *);" << endl
            ss << endl

            ss << "protected:" << endl
            ss << "  static constexpr const wl_interface *interface = &wayland::detail::" << name << "_interface;" << endl
            ss << "  static constexpr const unsigned int max_version = " << version << ";" << endl
            ss << endl
            ss << "  friend class global_t<" << name << "_t>;" << endl
            ss << "  friend class resource_t;" << endl
            ss << endl

            ss << "public:" << endl
            ss << "  " << name << "_t(client_t* client, uint32_t id, int version = " << version << ");" << endl
            ss << endl
            ss << "  static const std::string interface_name;" << endl
            ss << endl
            ss << "  operator " << orig_name << "*() const;" << endl
            ss << endl

            requests.each { request -> ss << request.print_signal_header() << endl }
            events.each { event -> ss << event.print_header() << endl }
            errors.each { error -> ss << error.print_server_header() << endl }

            ss << "};" << endl
            ss << endl
            ss << "using global_" << name << "_t = global_t<" << name << "_t>;" << endl
            ss << endl

            enums.each { e -> ss << e.print_header(name) }
            if (enums.any { it.bitfield} ) ss << endl
            enums.each { e ->
                if (!e.bitfield) return
                ss << "static inline " << name << "_" << e.name << " operator |("
                ss << name << "_" << e.name << " a, " << name << "_" << e.name << " b) {" << endl
                ss << "  return static_cast<enum " << name << "_" << e.name << ">(static_cast<uint32_t>(a) | static_cast<uint32_t>(b));" << endl
                ss << "}" << endl
                ss << endl
                ss << "static inline " << name << "_" << e.name << " " << name << "_" << e.name << "(uint32_t v) {" << endl
                ss << "  return static_cast<enum " << name << "_" << e.name << ">(v);" << endl
                ss << "}" << endl
                ss << endl
            }

            return ss.toString()
        }

        String print_interface_header() {
            return "  extern const wl_interface " << name << "_interface;" << endl
        }

        String print_server_body() {
            def ss = "" << ""
            ss << name << "_t::" << name << "_t(client_t* client, uint32_t id, int version)" << endl
            ss << "  : resource_t(client, id, version, const_cast<wl_interface*>(&detail::" << name << "_interface), &dispatcher) {}" << endl
            ss << endl
            ss << name << "_t::operator " << orig_name << "*() const {" << endl
            ss << "  return reinterpret_cast<" << orig_name << "*>(const_cast<" << name << "_t*>(this));" << endl
            ss << "}" << endl
            ss << endl

            events.each { event -> ss << event.print_body(name) << endl }
            errors.each { error -> ss << error.print_server_body(name) << endl }

            ss << "int " << name << "_t::dispatcher(const void *implementation [[maybe_unused]], void *target [[maybe_unused]], uint32_t opcode [[maybe_unused]], const struct wl_message *msg [[maybe_unused]], union wl_argument *args [[maybe_unused]]) {" << endl

            if(!requests.empty) {
                ss << "  " << name << "_t* obj = static_cast<" << name << "_t*>(resource_t::get(target));" << endl
                ss << "  switch(opcode) {" << endl
                int opcode = 0
                requests.each { request -> ss << request.print_dispatcher(opcode++) << endl }
                ss << "  }" << endl
            }

            ss << "  return 0;" << endl
            ss << "}" << endl

            return ss.toString()
        }

        String print_interface_body() {
            def ss = "" << ""
            ss << "const wl_interface wayland::detail::" << name << "_interface = {" << endl
            ss << "    \"" << orig_name << "\", " << version << "," << endl
            ss << "    " << requests.size() << ", new const wl_message[] {" << endl
            requests.each { request ->
                ss << "      {\"" << request.name << "\", \""
                if (request.since > 1)
                    ss << request.since
                request.args.each { arg ->
                    if (arg.allow_null)
                        ss << "?"
                    if (arg.type == "new_id" && arg.iface.empty)
                        ss << "su"
                    ss << arg.print_short()
                }
                ss << "\", new const wl_interface*[] {"
                request.args.each { arg ->
                    if (!arg.iface.isEmpty() && arg.iface == "buffer")
                        if (arg.iface == "buffer")
                            ss << " &wl_buffer_interface,"
                        else
                            ss << " &" << arg.iface << "_interface,"
                    else
                        ss << " nullptr,"
                }
                ss << "}}," << endl
            }
            ss << "    }," << endl
            ss << "    " << events.size() << ", new const wl_message[] {" << endl
            events.each { event ->
                ss << "      {\"" << event.name << "\", \""
                if (event.since > 1)
                    ss << event.since
                event.args.each { arg ->
                    if (arg.allow_null)
                        ss << "?"
                    if (arg.type == "new_id" && arg.iface.empty)
                        ss << "su"
                    ss << arg.print_short()
                }
                ss << "\", new const wl_interface*[] {"
                event.args.each { arg ->
                    if (!arg.iface.isEmpty())
                        ss << " &" << arg.iface << "_interface,"
                    else
                        ss << " nullptr,"
                }
                ss << "}}," << endl
            }
            ss << "    }"<< endl
            ss << "  };" << endl
            ss << endl

            return ss.toString()
        }
    }

    class protocol_t extends element_t {
        String copyright = ""
        File sourceOut = null;
        File headerOut = null;
        List<String> dependencies = new ArrayList<String>()
        List<interface_t> ifaces = new ArrayList<interface_t>()

        String print_source() {
            def ss = "" << ""
            ss << "#include \"" << name.replace("_", '-') << "-server-protocol.hpp\"" << endl
            ss << endl
            ss << "using namespace wayland;" << endl
            ss << "using namespace wayland::detail;" << endl
            ss << endl

            // interface bodies
            ifaces.each { iface -> ss << iface.print_interface_body() }

            // class member definitions
            ifaces.each { iface ->
                if(iface.name != "display") {
                    ss << iface.print_server_body() << endl
                }
            }
            ss << endl
            return ss.toString()
        }

        String print_header() {
            def ss = "" << ""

            ss << "#pragma once" << endl
            ss << endl
            ss << "#include <array>" << endl
            ss << "#include <functional>" << endl
            ss << "#include <memory>" << endl
            ss << "#include <string>" << endl
            ss << "#include <vector>" << endl
            ss << endl
            ss << "#include <lorie_wayland_server.hpp>" << endl
            dependencies.each { ss << "#include \"" << it << "-server-protocol.hpp\"" << endl }
            ss << endl

            // C forward declarations
            ifaces.each {iface ->
                if(iface.name != "display")
                    ss << iface.print_c_forward()
            }
            ss << endl

            ss << "namespace wayland {" << endl

            // C++ forward declarations
            ifaces.each { iface ->
                if(iface.name != "display")
                    ss << iface.print_forward()
            }
            ss << endl

            // interface headers
            ss << "namespace detail {" << endl
            ifaces.each { iface ->
                ss << iface.print_interface_header()
            }
            ss << "}" << endl
            ss << endl

            // class declarations
            ifaces.each { iface ->
                if(iface.name != "display") {
                    ss << iface.print_server_header() << endl
                }
            }
            ss << endl
            ss << "}" << endl

            return ss.toString()
        }
    }

    static String removePrefix(String name) {
        def prefix_len = name.indexOf('_')
        if (prefix_len != -1) {
            def prefix = name.substring(0, prefix_len)
            if (prefix == "wl" || prefix == "wp")
                return name.substring(prefix_len + 1, name.size())
        }
        return name
    }

    boolean xmlValidate(File xmlFile) {
        File schemaFile = new File(project.buildDir, "/intermediates/wayland/wayland.xsd")
        schemaFile.getParentFile().mkdirs()
        schemaFile.text = ''
        schemaFile << schema.stripMargin("|").stripIndent()
        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI)
        try {
            schemaFactory.newSchema(schemaFile)
                    .newValidator()
                    .validate(new StreamSource(xmlFile))
            return true
        } catch (SAXException e) {
            println(xmlFile.toString() + " is NOT valid reason:" + e)
            return false
        } catch (IOException ignored) {
            return false
        }
    }

    @SuppressWarnings('GroovyAssignabilityCheck')
    def parseXml(File xmlFile) {
        xmlValidate(xmlFile)
        String[] blocklistedInterfaces = ["wl_display", "wl_registry", "wl_buffer", "wl_shm", "wl_shm_pool"]

        protocol_t p = new protocol_t()
        def protocol = new XmlSlurper().parseText(xmlFile.getText())

        p.name = protocol.@name
        protocol.children("copyright").each { cr ->
            p.copyright = cr.text()
        }
        protocol.children("interface").each { iface ->
            if (blocklistedInterfaces.contains(iface.@name))
                return

            interface_t i = new interface_t()
            i.requests = new ArrayList<request_t>()
            i.events = new ArrayList<event_t>()
            i.enums = new ArrayList<enumeration_t>()
            i.errors = new ArrayList<post_error_t>()
            i.destroy_opcode = -1
            i.orig_name = iface.@name
            i.name = removePrefix(iface.@name.text())

            if (iface.@version != null)
                i.version = iface.@version.text() as int
            else
                i.version = 1

            if (iface.description) {
                i.summary = String.valueOf(iface.description.@summary).capitalize()
                i.description = iface.description.text()
            }

            int opcode = 0 // Opcodes are in order of the XML. (Sadly undocumented)
            iface.children("request").each { req ->
                request_t r = new request_t()
                r.name = req.@name
                r.opcode = opcode++
                r.args = new ArrayList<argument_t>()

                if (req?.@since?.text()?.length() > 0)
                    r.since = req.@since.text() as int
                else
                    r.since = 0

                if (req.description) {
                    r.summary = String.valueOf(req.description.@summary).capitalize()
                    r.description = req.description.text()
                }

                // destruction takes place through the class destructor
                if (req.@name == "destroy")
                    i.destroy_opcode = r.opcode
                req.children("arg").each { arg ->
                    argument_t a = new argument_t()
                    a.name = arg.@name
                    a.type = arg.@type
                    a.summary = String.valueOf(arg.@summary).capitalize()
                    a.iface_orig = arg.@interface
                    a.iface = removePrefix(arg.@interface.text())

                    String enum_val = arg.@enum
                    if (!enum_val.empty) {
                        if (enum_val.indexOf('.') == -1) {
                            a.enum_iface = i.name
                            a.enum_name = enum_val
                        } else {
                            a.enum_iface = removePrefix(enum_val.substring(0, enum_val.indexOf('.')))
                            a.enum_name = enum_val.substring(enum_val.indexOf('.') + 1)
                        }
                    }

                    a.allow_null = arg.@"allow-null" == "true"
                    if (arg.@type == "new_id")
                        r.ret = a
                    r.args.add(a)
                }
                i.requests.add(r)
            }

            opcode = 0
            iface.children("event").each { ev ->
                event_t e = new event_t()
                e.name = ev.@name
                e.opcode = opcode++
                e.args = new ArrayList<argument_t>()

                if (ev?.@since?.text()?.length() > 0)
                    e.since = ev.@since.text() as int
                else
                    e.since = 0

                if (ev.description) {
                    e.summary = String.valueOf(ev.description.@summary).capitalize()
                    e.description = ev.description.text()
                }

                ev.children("arg").each { arg ->
                    argument_t a = new argument_t()
                    a.name = arg.@name
                    a.type = arg.@type
                    a.summary = String.valueOf(arg.@summary).capitalize()
                    a.iface_orig = arg.@interface
                    a.iface = removePrefix(arg.@interface.text())

                    String enum_val = arg.@enum.text()
                    if (!enum_val.empty) {
                        if (enum_val.indexOf('.') == -1) {
                            a.enum_iface = i.name
                            a.enum_name = enum_val
                        } else {
                            a.enum_iface = removePrefix(enum_val.substring(0, enum_val.indexOf('.')))
                            a.enum_name = enum_val.substring(enum_val.indexOf('.') + 1)
                        }
                    }

                    a.allow_null = arg.@"allow-null" == "true"
                    if (arg.@type == "new_id")
                        e.ret = a
                    e.args.add(a)
                }
                i.events.add(e)
            }

            iface.children("enum").each { en ->
                enumeration_t e = new enumeration_t()
                e.name = en.@name
                e.bitfield = (en.@bitfield == "true")
                e.entries = new ArrayList<enum_entry_t>()

                if (en.description) {
                    e.summary = String.valueOf(en.description.@summary).capitalize()
                    e.description = en.description.text()
                }

                en.children("entry").each { entry ->
                    enum_entry_t ent = new enum_entry_t()
                    ent.name = entry.@name
                    if (ent.name != null &&
                            (ent.name == "default" || Character.isDigit(ent.name.charAt(0))))
                        ent.name = "_" + ent.name

                    ent.value = entry.@value
                    ent.summary = String.valueOf(entry.@summary).capitalize()
                    e.entries.add(ent)

                    if (e.name == "error") {
                        post_error_t error = new post_error_t()
                        error.name = ent.name
                        error.summary = String.valueOf(ent.summary).capitalize()
                        error.description = ent.description
                        i.errors.add(error)
                    }
                }
                i.enums.add(e)
            }
            p.ifaces.add(i)
        }
        return p
    }

    List<protocol_t> protocols = new ArrayList<>()
    private File outFolder

    WaylandScannerExtension() {
        NodeChild.metaClass.children << { name ->
            return delegate.depthFirst().findAll { t -> t.name() == name }
        }
    }

    void out(String s) {
        outFolder = new File(s)
        if (outFolder.exists() && !outFolder.isDirectory())
            throw new Exception(s + " is not a directory")
    }

    void scan(String... s) {
        if (outFolder == null)
            throw new Exception("outFolder property is empty")

        File src = getProject().file(s[0])
        if (!src.exists())
            throw new Exception(src.absolutePath + " does not exist")

        if (src.isFile() && src.getName().toLowerCase().endsWith(".xml")) {
            def protocol = parseXml(src)
            s.each { if (it != s[0]) protocol.dependencies.add(it) }

            def script = getProject().file("wayland-scaner.gradle")
            def source = new File(outFolder, protocol.name.replace('_', '-') + "-server-protocol.cpp")
            def header = new File(outFolder, protocol.name.replace('_', '-') + "-server-protocol.hpp")
            if ((source.exists() && (source.lastModified() < script.lastModified() || source.lastModified() < src.lastModified())) ||
                (header.exists() && (header.lastModified() < script.lastModified() || header.lastModified() < src.lastModified())))
            protocols.add(protocol)
        } else throw new Exception(src.absolutePath + "is not xml file")
    }
}

@SuppressWarnings('GroovyFallthrough')
abstract class WaylandScannerTask extends DefaultTask {
    @Internal
    abstract Property<WaylandScannerExtension> getExtension()

    @SuppressWarnings('unused')
    @TaskAction
    def execute() {
        extension.get().protocols.each { protocol ->
            protocol.outFolder.mkdirs()

            def source = new File(protocol.outFolder, protocol.name.replace('_', '-') + "-server-protocol.cpp")
            def header = new File(protocol.outFolder, protocol.name.replace('_', '-') + "-server-protocol.hpp")

            source.text = ''
            source << protocol.print_source()
            header.text = ''
            header << protocol.print_header()
        }
    }
}

void apply(Project project) {
    project.extensions.create("wayland", WaylandScannerExtension)
    project.extensions.wayland.project = project

    project.afterEvaluate {
        Task task = project.tasks.register('generateWaylandProtocols', WaylandScannerTask) {
            extension = project.extensions.wayland
        }.get()

        project.tasks.matching {t -> t.name.toLowerCase().contains("ndk")}.all {
            t -> t.dependsOn task
        }

        project.tasks.matching {t -> t.name.toLowerCase().contains("cmake")}.all {
            t -> t.dependsOn task
        }
    }
}

apply(project)
